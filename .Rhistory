"peso" %in% colnames(encuesta)
encuesta$peso = as.character(encuesta$peso)
encuesta$peso = as.numeric(encuesta$peso)
encuesta$altura = as.character(encuesta$altura)
encuesta$altura = as.numeric(as.character(encuesta$altura))
which(encuesta$edad)
install.packages("curl", dependencies = TRUE)
install.packages("httr", dependencies = TRUE)
install.packages("swirl", dependencies = TRUE)
library("swirl")
select_language(6)
select_language()
install_course_github("ifunam","programacion-estadistica-r")
swirl()
help.start()
?print
apropos("class")
example("read.table")
??regression
vignette("tests")
3+7
mi_variable <- (180/6)-15
mi_variable
y <- c(561,1105,1729,2465,2821)
print(y)
1:100
c(1.1,2.2,3.3,4.4) - c(1,1,1,1)
c(1,2,3,4,5,6,7,8,9,10) - c(1,2)
ls()
"hola mundo"
"Â¡Hola Mundo!"
colores <- c("rojo", " azul", "verde", "azul", "rojo")
colores <- c("rojo", "azul", "verde", "azul", "rojo")
print(colores)
complejo <- 2+1i
mi_variable == 15
length(complejo) <- 3
complejo
2^1024
0/0
fecha_primer_curso_R <- Sys.Date()
print(fecha_primer_curso_R)
vector("numeric", length = 10)
vector("character", length = 10)
vector("logical", length = 10)
swirl()
library(swirl)
swirl()
main()
0
x <- "R Tutorial"
gsub("ut","ot",x)
gsub("tut","ot",x)
gsub("tut","ot",x, ignore.case = T)
archivo <- read.csv(file = "PRUEBA_PETM_SHINY/auto_model_parte/searchZones/C1MM/MODEL_RESULTS_C1MM_2019-11-13_09.19.19.csv", header = T, sep = " ")
View(archivo)
View(archivo)
x <- c(1:10, 5:15)
x
unique(x)
a <- c(rep("A", 3), rep("B", 3), rep("C",2))
b <- c(1,1,2,4,1,1,2,2)
df <-data.frame(a,b)
df
unique(df)
length(unique(df))
df
sdupli <- unique(df)
sdupli
length(sdupli)
is.data.frame(archivo)
is.matrix(archivo)
archivo$UNICODE
sletras_archivo_unicode <- gsub("[A-z]","", archivo$UNICODE)
sletras_archivo_unicode
sduplicados_archivo_unicode <- unique(sletras_archivo_unicode)
sduplicados_archivo_unicode
length(sduplicados_archivo_unicode)
df
length(df$a)
prod(3,4,2)
archivo$probability
(1 - (archivo$probability))
ggplot(df, aes(x = age, y = spend)) + geom_point()
library(ggplot2)
df_prueba_kmeans <- data.frame(age = c(18, 21, 22, 24, 26, 26, 27, 30, 31, 35, 39, 40, 41, 42, 44, 46, 47, 48, 49, 54),
spend = c(10, 11, 22, 15, 12, 13, 14, 33, 39, 37, 44, 27, 29, 20, 28, 21, 30, 31, 23, 24))
ggplot(df, aes(x = age, y = spend)) + geom_point()
ggplot(df, aes(x = age, y = spend)) +
geom_point()
ggplot(df_prueba_kmeans, aes(x = age, y = spend)) +
geom_point()
install.packages("animation")
library(animation)
install.packages("animation")
library(animation)
set.seed(2345)
kmeans.ani(df_prueba_kmeans,3)
set.seed(2345)
kmeans.ani(df_prueba_kmeans,3)
set.seed(2345)
kmeans.ani(df_prueba_kmeans,3)
set.seed(1000)
kmeans.ani(df_prueba_kmeans,3)
set.seed(2345)
kmeans.ani(df_prueba_kmeans,3)
print(kmeans(df,3))
browser()
original_map <- before
# crear vectores
manzana <- c("roja","verde","amarilla")
# crear listas
lista1 <- list(c(2,5,3),21.3,sin)
Saludo <- "Hola Mundo"
browser()
ggplot(df_prueba_kmeans, aes(x = age, y = spend)) +
geom_point()
# crear vectores
manzana <- c("roja","verde","amarilla")
print(Saludo)
calculadora(2,3,"suma")
calculadora(2,3,"suma")
calculadora(2,3,"suma")
calculadora(2,3,"suma")
calculadora(2,3,"suma")
calculadora(2,3,"suma")
calculadora(2,3,"suma")
calculadora(2,3,"suma")
{
return(numero1 - numero2)
}
calculadora <- function(numero1, numero2, operacion)
{
num <- 5
if(operacion == "suma")
{
return(numero1 + numero2)
}
if(operacion == "resta")
{
return(numero1 - numero2)
}
if(operacion == "multiplicacion")
{
return(numero1 * numero2)
}
if(operacion == "division")
{
return(numero1 / numero2)
}
}
calculadora(2,3,"suma")
calculadora(2,3,"suma")
calculadora(2,3,"suma")
calculadora <- function(numero1, numero2, operacion)
{
num <- 5
if(operacion == "suma")
{
return(numero1 + numero2)
}
if(operacion == "resta")
{
return(numero1 - numero2)
}
if(operacion == "multiplicacion")
{
return(numero1 * numero2)
}
if(operacion == "division")
{
return(numero1 / numero2)
}
}
calculadora(2,3,"suma")
calculadora <- function(numero1, numero2, operacion)
{
browser()
num <- 5
if(operacion == "suma")
{
return(numero1 + numero2)
}
if(operacion == "resta")
{
return(numero1 - numero2)
}
if(operacion == "multiplicacion")
{
return(numero1 * numero2)
}
if(operacion == "division")
{
return(numero1 / numero2)
}
}
arriba_de <- function(x, limite)
{
indices <- x > limite
x[indices]
}
calculadora(2,3,"suma")
archivo <- read.csv(file = "PRUEBA_PETM_SHINY/auto_model_parte/searchZones/C1MM/MODEL_RESULTS_C1MM_2019-11-13_09.19.19.csv")
library(RColorBrewer)
library(deldir)
library(leaflet)
library(sp)
source("~/PRUEBA_PETM_SHINY/Prueba_Shiny-Control/prueba_controller/prueba_palettes.R")
#source("~/PETM-shiny/shiny-CONTROL/controller/delaunayTriangulationFunctions.R")
#source("~/PRUEBA_PETM_SHINY/theta_algo_parte/mariano_melgar.R")
get_houses_to_visit_opt <- function(before, cap, searchZone) {
#browser()
#before <- read.csv(file = "~/PRUEBA_PETM_SHINY/auto_model_parte/searchZones/C1MM/MODEL_RESULTS_C1MM_2019-11-13_09.19.19.csv", header = TRUE, sep = " ")
original_map <- before
# Eliminate any where probability is 1 (that means, they are positive houses)
print("Eliminando las casas positivas")
original_map <- original_map[which(original_map$probability != 1),]
#print(original_map)
# Add row numbers
print("a;adiendo la columna row.nun")
original_map$row.num <- c(1:nrow(original_map))
#print(original_map)
# Make new column "div_code" that holds strings
original_map$div_code <- ""
print("ULTIMO RESULTADO")
#print(original_map)
divide_regions_kmeans <- function(map) {
#browser()
#print(map)
if (nrow(map) <= 1 | length(unique(gsub("[A-z]", "", map$UNICODE))) <= 1) {
# Base case 1: if the map only has one house in it
#print("Entro al primer IF")
} else if ((1 - prod(1 - map$probability)) < cap) {
# Base case 2: if the map is already less than cap
#print("Entro al segundo ELSE IF")
} else {
#print("ENTRO AL ULTIMO ELSE")
if (nrow(map) == 2) {
group_one <- 1
group_two <- 2
} else {
#print("ENTRO AL ELSE DEL KMEANS")
res <- kmeans(data.frame(map$LONGITUDE, map$LATITUDE), 2, nstart=100)$cluster
#print(res)
#print("REALIZA EL GRUPO 1, REALIZA EL GRUPO 2")
group_one <- which(res == 1)
group_two <- which(res == 2)
#print(group_one)
#print(group_two)
}
# Get the row numbers of the original map
#print("MAP")
#print(map)
#print("Obtiene las filas solo del GROUP 1 de map, solo de la columna row.num")
o_map_g_one <- map[group_one,]$row.num
#print(o_map_g_one)
#print("Obtiene las filas del GROUP 2 de map, solo de la columna row.num")
o_map_g_two <- map[group_two,]$row.num
#print(o_map_g_two)
# For these groups, add to the div_code
# *NOTE* We are modifying the ORIGINAL MAP OBJECT here (so it is iterative, forward)
if (!is.null(group_one)) {
original_map[o_map_g_one,]$div_code <- paste0(original_map[o_map_g_one,]$div_code, "1")
original_map <<- original_map
#print("Realizo el paste0 al div_code a;adio el 1 a ese campo")
}
if(!is.null(group_two)) {
original_map[o_map_g_two,]$div_code <- paste0(original_map[o_map_g_two,]$div_code, "2")
original_map <<- original_map
#print("Realizo el paste0 al div_code a;adio el 2 a ese campo")
#print(original_map)
}
# Original_map ha guardado los cambios que se hizo al div_code de 1 y 2
# map no guardo nada del div_code
#print(original_map)
#print(map)
# Divide regions again
#print("Realiza otra iteracion del grupo 1")
divide_regions_kmeans(map[group_one,])
divide_regions_kmeans(map[group_two,])
}
}
divide_regions_kmeans(original_map)
## Crea archivo .pdf para los plots
print("CREACION DE PDF")
testDir <- paste0("~/PRUEBA_PETM_SHINY/theta_algo_parte/results/", searchZone)
print(testDir)
if (!file.exists(testDir)) {
dir.create(paste0("~/PRUEBA_PETM_SHINY/theta_algo_parte/results/", searchZone))
}
setwd(paste0("~/PRUEBA_PETM_SHINY/theta_algo_parte/results/", searchZone))
pdf(paste0(searchZone, "_opt_", "cap_", cap, '.pdf'), width=20, height=15)
## First plot
print("Primer dibujo")
if (length(unique(original_map$probability)) != 1) {
original_map$color <- YlOrRd.q(original_map$probability)
} else {
original_map$color <- "black"
}
plot(original_map[,c('LONGITUDE','LATITUDE')], col=original_map$color, pch = 19, cex = 0.6)
}
get_houses_to_visit_opt(archivo, 0.326, "C1MM")
View(archivo)
archivo <- read.csv(file = "~/PRUEBA_PETM_SHINY/auto_model_parte/searchZones/C1MM/MODEL_RESULTS_C1MM_2019-11-13_09.19.19.csv")
plot(encuesta$edad, encuesta$peso)
version
plot(encuesta[,c('edad','peso')])
shiny::runApp('ShinyApp/shinyEJemplo')
runApp('ShinyApp/shinyEJemplo')
runApp('ShinyApp/shinyEJemplo')
runApp('ShinyApp/shinyEJemplo')
runApp('ShinyApp/shinyEJemplo')
runApp('ShinyApp/shinyEJemplo')
install.packages("DT")
install.packages("ggplot2")
DT
library(DT)
DT
diamonds
diamonds
library(ggplot2)
diamonds
runApp('ShinyApp/shinyEJemplo')
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
shiny::runApp('ShinyApp/shinyEJemplo')
install.packages("DT")
install.packages("DT")
shiny::runApp('ShinyApp/shinyEJemplo')
runApp('ShinyApp/shinyEJemplo')
runApp('ShinyApp/shinyEJemplo')
runApp('ShinyApp/shinyEJemplo')
runApp('ShinyApp/shinyEJemplo')
runApp('ShinyApp/shinyEJemplo')
runApp('ShinyApp/shinyEJemplo')
runApp('ShinyApp/shinyEJemplo')
shiny::runApp('PETM-shiny/shiny-VIGILANCIA-INTEGRADA')
View(dbGlobalConfig)
runApp('PETM-shiny/shiny-VIGILANCIA-INTEGRADA')
runApp('PETM-shiny/shiny-VIGILANCIA-INTEGRADA')
View(dbGlobalConfig)
runApp('PETM-shiny/shiny-VIGILANCIA-INTEGRADA')
shiny::runApp('ShinyApp/shinyEJemplo')
# Connect to the database
db <-
dbConnect(
MySQL(),
dbname = database,
host = dbGlobalConfig$host,
port = dbGlobalConfig$port,
user = dbGlobalConfig$user,
password = dbGlobalConfig$password
)
runApp('ShinyApp/shinyEJemplo')
runApp('ShinyApp/shinyEJemplo')
shiny::runApp('ShinyApp/Ejemplo2/chinches')
install.packages("shinycssloaders")
runApp('ShinyApp/Ejemplo2/chinches')
runApp('ShinyApp/Ejemplo2/chinches')
runApp('ShinyApp/Ejemplo2/chinches')
shiny::runApp('ShinyApp/Ejemplo2/chinches')
runApp('ShinyApp/Ejemplo2/chinches')
runApp('ShinyApp/Ejemplo2/chinches')
data()
runApp('ShinyApp/Ejemplo2/chinches')
runApp('ShinyApp/Ejemplo2/chinches')
install.packages("shinyalert")
runApp('ShinyApp/Ejemplo2/chinches')
runApp('ShinyApp/Ejemplo2/chinches')
runApp('ShinyApp/Ejemplo2/chinches')
runApp('ShinyApp/Ejemplo2/chinches')
runApp('ShinyApp/Ejemplo2/chinches')
runApp('ShinyApp/Ejemplo2/chinches')
runApp('ShinyApp/Ejemplo2/chinches')
runApp('ShinyApp/Ejemplo2/chinches')
runApp('ShinyApp/Ejemplo2/chinches')
runApp('ShinyApp/Ejemplo2/chinches')
runApp('ShinyApp/Ejemplo2/chinches')
runApp('ShinyApp/Ejemplo2/chinches')
runApp('ShinyApp/Ejemplo2/chinches')
userNameCheck
userNameCheck
runApp('ShinyApp/Ejemplo2/chinches')
runApp('ShinyApp/Ejemplo2/chinches')
runApp('ShinyApp/Ejemplo2/chinches')
runApp('ShinyApp/Ejemplo2/chinches')
runApp('ShinyApp/Ejemplo2/chinches')
runApp('ShinyApp/Ejemplo2/chinches')
runApp('ShinyApp/Ejemplo2/chinches')
install.packages("data.table")
install.packages("dplyr")
install.packages(c("directlabels", "plotly", "reshape"))
library(dplyr)
library(tidyr)
library(data.table)
library(tidyverse)
library(lubridate)
library(dplyr)
library(tidyr)
library(tidyverse)
library(lubridate)
library(data.table)
setwd("~/covid19")
covid_dia <- fread("~/covid19/data/crudas/covidPE_pordia_20200501_AL.csv")
str(covid_dia)
names(covid_dia)
head(covid_dia)
covid_dia <- mutate_if(covid_dia, is.character, toupper)
sapply(covid_dia, class)
table(covid_dia$FECHA)
covid_dia$FECHA2 <- covid_dia$FECHA
covid_dia <- separate(covid_dia,
col = "FECHA2",
into = c("DIA", "MES","ANO"),
sep = "/")
covid_dia<-covid_dia %>%
mutate(FECHA = as.Date(as.character(FECHA), format = "%d/%m/%y"))
names(covid_dia)
covid_dia <- covid_dia[,c(1, 15:17, 2:14)]
str(covid_dia$FECHA)
unique(covid_dia$FECHA)
sum(is.na(covid_dia$FECHA))
unique(covid_dia$TOTAL_POSITIVOS)
sum(is.na(covid_dia$TOTAL_POSITIVOS))
unique(covid_dia$TOTAL_PRUEBAS)
sum(is.na(covid_dia$TOTAL_PRUEBAS))
unique(covid_dia$TOTAL_DESCARTADOS)
sum(is.na(covid_dia$TOTAL_DESCARTADOS))
unique(covid_dia$POSITIVOS_DIA)
sum(is.na(covid_dia$POSITIVOS_DIA))
unique(covid_dia$PRUEBAS_DIA)
sum(is.na(covid_dia$PRUEBAS_DIA))
unique(covid_dia$DESCARTADOS_DIA)
sum(is.na(covid_dia$DESCARTADOS_DIA))
unique(covid_dia$RECUPERADOS)
sum(is.na(covid_dia$RECUPERADOS))
unique(covid_dia$FALLECIDOS)
sum(is.na(covid_dia$FALLECIDOS))
unique(covid_dia$HOSPITALIZADOS)
sum(is.na(covid_dia$HOSPITALIZADOS))
unique(covid_dia$HOSPITALIZADOS_UCI)
sum(is.na(covid_dia$HOSPITALIZADOS_UCI))
names(covid_dia)
write.csv(covid_dia, "data/modificadas/covidPE_PORdia_20200501_AL_clean.csv")
library(tidyr)
library(dplyr)
library(data.table)
library(lubridate)
library(ggplot2)
library(directlabels)
library(reshape)
library(colorspace)
library(plotly)
library(cowplot)
library("gridExtra")
library(scales)
library(bbplot)
library(data.table)
library(dplyr)
library(tidyr)
library(lubridate)
library(ggplot2)
library(directlabels)
library(reshape)
library(colorspace)
library(plotly)
library(cowplot)
library("gridExtra")
library(scales)
d=data.frame(Fecha=as.Date(c("2020-03-06", "2020-03-11", "2020-03-12", "2020-03-15","2020-03-16", "2020-03-26","2020-03-31","2020-04-02","2020-04-07")), event=c(" Primer Caso", " Cierre colegios", "Cierre universidades", " Inicio de cuarentena","Cierre de aeropuertos", " ExtensiÃ³n cuarentena", " RestricciÃ³n por sexo","Toque de queda 18pm-5am","ExtensiÃ³n cuarentena"))
acumulado<-fread("~/covid19/data/modificadas/covidPE_PORdia_20200501_AL_clean.csv")
setnames(acumulado,"TOTAL_POSITIVOS","Casos positivos")
setnames(acumulado,"TOTAL_PRUEBAS","Pruebas realizadas")
acumulado1<-melt(acumulado,id="FECHA")
acumulado1$value<-as.numeric(acumulado1$value)
target <- c("Casos positivos", "Pruebas realizadas")
acumulado1<-filter(acumulado1, variable %in% target)
acumulado1<-acumulado1 %>%
mutate(Fecha = as.Date(FECHA))
setwd("~/covid19/outputs_covid19/")
png(filename="20200501_pruebas_vs_positivos_COVID19.png", width=1100, height=600)
ggplot() +
geom_line(data = acumulado1, aes(Fecha, value, colour=variable,group=variable),alpha =1.6) +
scale_colour_manual(values=c("red", "blue"))+
scale_x_date(labels = date_format("%d-%b"),
breaks = as.Date(c("2020-03-06", "2020-03-11", "2020-03-12",
"2020-03-15","2020-03-16" ,"2020-03-26","2020-03-31",
"2020-04-02","2020-04-07")),
minor_breaks = NULL)+
# scale_x_date() +
geom_vline(data=d, mapping=aes(xintercept=Fecha), color="gray") +
geom_text(data=d, mapping=aes(x=Fecha, y =0,label=event), size=4, angle=90, vjust=-0.4, hjust=0)+
# theme_minimal()+
theme(panel.background = element_rect(fill = "white"),
legend.position = c(0.35,0.95),
legend.justification = c("right","top"),
axis.text.x = element_text(vjust =0.60,angle=60,face = "bold.italic", size = 10))+
labs(title="SARS-CoV-2 en PerÃº", y="Pruebas positivas y pruebas realizadas",
x="Fecha", caption="Source :varios")+
theme(plot.title = element_text(face = "bold.italic",size = 5) )+
bbc_style()
dev.off()
library(data.table)
library(dplyr)
library(tidyr)
library(tidyverse)
library(lubridate)
setwd("~/covid19")
covid_dep <- fread("~/covid19/data/crudas/covidPE_DEP_20200501_AL.csv")
str(covid_dep)
names(covid_dep)
